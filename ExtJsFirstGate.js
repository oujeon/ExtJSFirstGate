/*
 * File: app/view/ExtJsFirstGate.js
 *
 * This file was generated by Sencha Architect version 3.0.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('sample.view.ExtJsFirstGate', {
    extend: 'Ext.container.Viewport',
    alias: 'widget.ExtJsFirstGate',

    requires: [
        'Ext.container.Container',
        'Ext.form.Label',
        'Ext.toolbar.Spacer'
    ],

    layout: 'fit',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'container',
                    itemId: 'ctWelcome',
                    margin: 2,
                    style: 'border: 2px solid #000;',
                    layout: {
                        type: 'vbox',
                        align: 'center',
                        defaultMargins: {
                            top: 0,
                            right: 0,
                            bottom: 0,
                            left: 0
                        },
                        pack: 'center'
                    },
                    items: [
                        {
                            xtype: 'label',
                            html: '<h1>Maine Coon</h1>',
                            itemId: 'mylabel',
                            style: 'font-size:30px;cursor:pointer;',
                            listeners: {
                                render: {
                                    fn: me.onMylabelRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'label',
                            html: '<h1>building tool</h1>',
                            style: 'font-size:10px;'
                        },
                        {
                            xtype: 'tbspacer',
                            height: 150
                        }
                    ]
                },
                {
                    xtype: 'container',
                    itemId: 'ctWorkSpace',
                    margin: 2,
                    style: 'border: 2px solid #000;',
                    layout: {
                        type: 'vbox',
                        align: 'center',
                        defaultMargins: {
                            top: 0,
                            right: 0,
                            bottom: 0,
                            left: 0
                        },
                        pack: 'center'
                    },
                    items: [
                        {
                            xtype: 'label',
                            html: '<h1>Work Space</h1>',
                            itemId: 'mylabel',
                            style: 'font-size:30px;cursor:pointer;',
                            listeners: {
                                render: {
                                    fn: me.onMylabelRender1,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'tbspacer',
                            height: 150
                        }
                    ]
                },
                {
                    xtype: 'container',
                    itemId: 'ctSignInOut',
                    margin: 2,
                    style: 'border: 2px solid #000;',
                    layout: {
                        type: 'vbox',
                        align: 'center',
                        defaultMargins: {
                            top: 0,
                            right: 0,
                            bottom: 0,
                            left: 0
                        },
                        pack: 'center'
                    },
                    items: [
                        {
                            xtype: 'label',
                            html: '<h1>Sign In</h1>',
                            itemId: 'mylabel',
                            style: 'font-size:30px;cursor:pointer;',
                            listeners: {
                                render: {
                                    fn: me.onMylabelRender11,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'tbspacer',
                            height: 150
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onMylabelRender: function(component, eOpts) {
        //
        //
        //

        var me = component;
        var welcome = me.up('viewport').query('container[itemId=ctWelcome]')[0];
        var workspace = me.up('viewport').query('container[itemId=ctWorkSpace]')[0];
        var signinout = me.up('viewport').query('container[itemId=ctSignInOut]')[0];


        me.getEl().on('click', function(){
            welcome.hide();
            workspace.show();
            signinout.hide();
        }, me);

    },

    onMylabelRender1: function(component, eOpts) {
        //
        //
        //


        var me = component;
        var welcome = me.up('viewport').query('container[itemId=ctWelcome]')[0];
        var workspace = me.up('viewport').query('container[itemId=ctWorkSpace]')[0];
        var signinout = me.up('viewport').query('container[itemId=ctSignInOut]')[0];


        me.getEl().on('click', function(){
            welcome.hide();
            workspace.hide();
            signinout.show();
        }, me);

    },

    onMylabelRender11: function(component, eOpts) {
        //
        //
        //

        var me = component;
        var welcome = me.up('viewport').query('container[itemId=ctWelcome]')[0];
        var workspace = me.up('viewport').query('container[itemId=ctWorkSpace]')[0];
        var signinout = me.up('viewport').query('container[itemId=ctSignInOut]')[0];


        me.getEl().on('click', function(){
            welcome.show();
            workspace.hide();
            signinout.hide();
        }, me);

    }

});